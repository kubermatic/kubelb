/*
Copyright 2025 The KubeLB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TunnelSpec defines the desired state of Tunnel
type TunnelSpec struct {
	// Hostname is the hostname of the tunnel. If not specified, the hostname will be generated by KubeLB.
	// +optional
	Hostname string `json:"hostname,omitempty"`
}

// TunnelStatus defines the observed state of Tunnel
type TunnelStatus struct {
	// Hostname contains the actual hostname assigned to the tunnel
	// +optional
	Hostname string `json:"hostname,omitempty"`

	// URL contains the full URL to access the tunnel
	// +optional
	URL string `json:"url,omitempty"`

	// ConnectionManagerURL contains the URL that clients should use to establish tunnel connections
	// +optional
	ConnectionManagerURL string `json:"connectionManagerURL,omitempty"`

	// Phase represents the current phase of the tunnel
	// +optional
	Phase TunnelPhase `json:"phase,omitempty"`

	// Resources contains references to the resources created for this tunnel
	// +optional
	Resources TunnelResources `json:"resources,omitempty"`

	// Conditions represents the current conditions of the tunnel
	// +optional
	Conditions []metav1.Condition `json:"conditions,omitempty"`
}

// TunnelResources contains references to resources created for the tunnel
type TunnelResources struct {
	// ServiceName is the name of the service created for this tunnel
	// +optional
	ServiceName string `json:"serviceName,omitempty"`

	// RouteRef is a reference to the route (HTTPRoute or Ingress) created for this tunnel
	// +optional
	RouteRef *corev1.ObjectReference `json:"routeRef,omitempty"`
}

// TunnelPhase represents the phase of tunnel
type TunnelPhase string

const (
	// TunnelPhasePending means the tunnel is being provisioned
	TunnelPhasePending TunnelPhase = "Pending"
	// TunnelPhaseReady means the tunnel is ready to accept connections
	TunnelPhaseReady TunnelPhase = "Ready"
	// TunnelPhaseFailed means the tunnel provisioning failed
	TunnelPhaseFailed TunnelPhase = "Failed"
	// TunnelPhaseTerminating means the tunnel is being terminated
	TunnelPhaseTerminating TunnelPhase = "Terminating"
)

// +kubebuilder:resource:scope=Namespaced
// +kubebuilder:object:generate=true
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:JSONPath=".status.hostname",name="Hostname",type="string"
// +kubebuilder:printcolumn:JSONPath=".status.phase",name="Phase",type="string"
// +kubebuilder:printcolumn:JSONPath=".metadata.creationTimestamp",name="Age",type="date"

// Tunnel is the Schema for the tunnels API
type Tunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TunnelSpec   `json:"spec,omitempty"`
	Status TunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TunnelList contains a list of Tunnel
type TunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tunnel `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Tunnel{}, &TunnelList{})
}
